	##############################################################################################################################
	##
	##	Configuracion del log4j    No ubicar en \WEB-INF\classes\log4j.properties
	##
	##############################################################################################################################
	##
	##	Todos los niveles @ALL
	##
	## * DEBUG: Se utiliza para escribir mensajes de depuración, este log no debe estar activado cuando la ap
	##	licación se encuentre en producción.
	## * INFO: Se utiliza para mensajes similares al modo "verbose" en otras aplicaciones.
    	## * WARN: Se utiliza para mensajes de alerta sobre eventos que se desea mantener constancia, pero que no afectan 
    	##	el correcto funcionamiento del programa.
    	## * ERROR: Se utiliza en mensajes de error de la aplicación que se desea guardar, estos eventos afectan al programa 
    	##	pero lo dejan seguir funcionando, como por ejemplo que algún parámetro de configuración no es correcto y se 
    	##	carga el parámetro por defecto.
    	## * FATAL: Se utiliza para mensajes críticos del sistema, generalmente luego de guardar el mensaje el programa abortará.
    	## * Adicionalmente a estos niveles de log, existen 2 niveles extras que solo se utilizan en el archivo de configuración:
    	##	*ALL: este es el nivel más bajo posible, habilita todos los logs. 
    	##	*OFF: este es el nivel más alto posible, deshabilita todos los logs.
    	##
	###############################################################################################################################
	##
	##	Loggers
        ##
	## La principal ventaja del Log4j comparado con el tradicional System.out.println() es su capacidad para habilitar o 
	## deshabilitar los registradores de mensajes sin afectar a los demás. Un registrador de mensajes (Logger) son 
	## entidades autónomas con configuración independiente, de tal manera que uno tenga cierta funcionalidad que 
	## otro no lo tenga. Los nombres de los loggers son sensibles a mayúsculas.
        ##
	## Aquí estamos definiendo que nuestro Logger serán stdout y Default. Ambos serán para atender todos los niveles.
        ##
	## Especial interes merece la propiedad Threshold del appender que permite configurar un nivel de log por
	## debajo del especificaco para el logger. Nosotros configuramos el logger para todos los niveles. El appender.stdout
	## sólo mostrará nivel INFO, mientras que appender.Default (archivo) nos mostrará  DEBUG, WARN e INFO.
        ##
	#################################################################################################################################
	##	
	##	Appenders
        ##
	## La habilidad para activar o desactivar cualquier logger es solo una parte de Log4j. El framework permite registrar 
	## los eventos en varios destinos. Para Log4j una salida (pantalla, archivo, etc) es un appender. Actualmente, existe 
	## appenders para consola (como hemos visto), archivos, componentes visuales, servidores de sockets, JMS, Registro de 
	## Eventos de NT, y demonios de registro Unix.
	##
	## El appender.Default se escribirá en un archivo
	## El appender.stdout se mostrará por consola
        ##
	#################################################################################################################################
        ##
	##	Layouts
        ##
	## El layout es el responsable de formatear los mensajes de acuerdo a criterio del programador. Existen dos tipos de 
	## Layout: SimpleLayout, que básicamente muestra el nivel del mensaje y el mensaje en sí, y el PatternLayout que consiste 
	## en formatear la salida.
	##
	#################################################################################################################################
	
	
	##log4j.rootCategory=ALL, Default, stdout
        
	##log4j.appender.Default=org.apache.log4j.FileAppender
    ##	log4j.appender.Default.Threshold=DEBUG
    ##	log4j.appender.Default.file=c:/log/springapp.log
    ##	log4j.appender.Default.layout=org.apache.log4j.PatternLayout
    ##	log4j.appender.Default.layout.ConversionPattern=%5p [%t] %d (%F:%L) - %m%n
    ##	log4j.appender.Default.append=true
    ##	log4j.appender.Default.MaxFileSize=500KB
    ##	log4j.appender.Default.MaxBackupIndex=50
    
	##log4j.appender.stdout=org.apache.log4j.ConsoleAppender
	##log4j.appender.stdout.Threshold=INFO
	##log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
	##log4j.appender.stdout.layout.ConversionPattern=%5p [%t] %d (%F:%L) - %m%n
	
	# Define the root logger with appender file
	log4j.rootLogger = DEBUG, FILE,stdout
	# Define the file appender
	log4j.appender.FILE=org.apache.log4j.FileAppender
	# Set the name of the file
	log4j.appender.FILE.File=D:\\log.out
	# Set the immediate flush to true (default)
	log4j.appender.FILE.ImmediateFlush=true
	# Set the threshold to debug mode
	log4j.appender.FILE.Threshold=debug
	# Set the append to false, overwrite
	log4j.appender.FILE.Append=false
	# Define the layout for file appender
	log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
	log4j.appender.FILE.layout.conversionPattern=%5p [%t] %d (%F:%L) - %m%n
         
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
	log4j.appender.stdout.Threshold=INFO
	log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
	log4j.appender.stdout.layout.ConversionPattern=%5p [%t] %d (%F:%L) - %m%n     
         
         #################################################################################################################################
         ##                                                                                                                               
         ##	Layouts                                                                                                                  
         ##                                                                                                                               
         ## El layout es el responsable de formatear los mensajes de acuerdo a criterio del programador. Existen dos tipos de             
         ## Layout: SimpleLayout, que básicamente muestra el nivel del mensaje y el mensaje en sí, y el PatternLayout que consiste        
         ## en formatear la salida.                                                                                                       
         ##                                                                                                                               
         #################################################################################################################################